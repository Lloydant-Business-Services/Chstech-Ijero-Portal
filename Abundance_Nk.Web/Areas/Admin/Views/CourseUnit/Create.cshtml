@model Abundance_Nk.Web.Areas.Admin.ViewModels.CourseUnitViewModel

@{
    ViewBag.Title = "Create";
    Layout = "~/Areas/Admin/Views/Shared/_AdminLayout.cshtml";
}
@section Scripts {
    <script>
        $(document).ready(function () {
            $("#Department_Option_Id").empty();
        //$("#Department_Option_Id").append('<option value="' + 0 + '">' + '-- No Option --' + '</option>');
    });

    $("#Department_Id").change(function () {

        var department = $("#Department_Id").val();
        var programme = $("#Programme_Id").val();
        //var level = $("#Level_Id").val();

        if (department == undefined || programme == undefined) {
            $("#Department_Option_Id").hide();
            return;
        }

        $("#Department_Option_Id").empty();

        $.ajax({
            type: 'POST',
            url: '@Url.Action("GetDepartmentOptionByDepartment", "CourseUnit")', // we are calling json method
            dataType: 'json',
            data: { id: department, programmeid: programme },
            success: function (departmentOptions) {

                if (departmentOptions == "" || departmentOptions == null || departmentOptions == undefined) {
                    $("#Department_Option_Id").hide();
                } else {
                    $("#Department_Option_Id").append('<option value="' + 0 + '"> -- Select -- </option>');
                    $.each(departmentOptions, function (i, Option) {
                        $("#Department_Option_Id").append('<option value="' + Option.Value + '">' + Option.Text + '</option>');
                    });
                    if (programme > 2) {
                        $("#Department_Option_Id").show();
                    }

                }
            },
            error: function (ex) {
                alert('Failed to retrieve department Options.' + ex);
            }
        });

    });

    $("#Programme_Id").change(function () {




    });

    //Programme Drop down Selected-change event
    $("#Programme_Id").change(function () {
        
        $("#Department_Id").empty();
        $.ajax({
            type: 'POST',
            url: '@Url.Action("GetDepartments", "CourseUnit")', // Calling json method
                dataType: 'json',
                data: { id: $("#Programme_Id").val() },
                // Get Selected Country ID.
                success: function(departments) {
                    $("#Department_Id").append('<option value="' + 0 + '">' +
                        '-- Select Department --' + '</option>');
                    $.each(departments, function(i, department) {
                        $("#Department_Id").append('<option value="' + department.Value + '">' +
                            department.Text + '</option>');
                    });
                },
                error: function(ex) {
                    alert('Failed to retrieve departments.' + ex);
                }
        });

        $("#Level_Id").empty();
        $.ajax({
            type: 'POST',
            url: '@Url.Action("GetLevels", "CourseUnit")', // Calling json method
            dataType: 'json',
            data: { id: $("#Programme_Id").val() },
            // Get Selected Country ID.
            success: function (levels) {
                $("#Level_Id").append('<option value="' + 0 + '">' +
                    '-- Select Level --' + '</option>');
                $.each(levels, function (i, level) {
                    $("#Level_Id").append('<option value="' + level.Value + '">' +
                        level.Text + '</option>');
                });
            },
            error: function (ex) {
                alert('Failed to retrieve levels.' + ex);
            }
        });

            var department = $("#Department_Id").val();
            var programme = $("#Programme_Id").val();

            if (department == undefined || programme == undefined) {
                $("#Department_Option_Id").hide();
                return;
            }

            $("#Department_Option_Id").empty();

            $.ajax({
                type: 'POST',
                url: '@Url.Action("GetDepartmentOptionByDepartment", "CourseUnit")', // we are calling json method
                dataType: 'json',
                data: { id: department, programmeid: programme },
                success: function (departmentOptions) {

                    if (departmentOptions == "" || departmentOptions == null || departmentOptions == undefined) {
                        $("#Department_Option_Id").hide();
                    } else {
                        $("#Department_Option_Id").append('<option value="' + 0 + '"> -- Select -- </option>');
                        $.each(departmentOptions, function (i, Option) {
                            $("#Department_Option_Id").append('<option value="' + Option.Value + '">' + Option.Text + '</option>');
                        });
                        if (programme > 2) {
                            $("#Department_Option_Id").show();
                        }

                    }
                },
                error: function (ex) {
                    alert('Failed to retrieve department Options.' + ex);
                }
            });
         
            
            return false;
        });
    </script>

}

<h2>Create</h2>
@if(ViewBag.SuccessMsg != null)
{
    <h3>@ViewBag.SuccessMsg</h3>
}

@using (Html.BeginForm("Create", "CourseUnit", FormMethod.Post))
{
    @Html.AntiForgeryToken()

    <div class="form-horizontal">
        <h4>COURSE UNIT</h4>
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })

        <div class="form-group">
            @Html.LabelFor(model => model.Session.Id, "Session", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
               

                @Html.DropDownListFor(m => m.Session.Id, (IEnumerable<SelectListItem>)ViewBag.SessionSelectList, new { @class = "form-control", @id = "selectedSession", required = "required" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Programme.Id, "Programme", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownListFor(m => m.Programme.Id, (IEnumerable<SelectListItem>)ViewBag.ProgrammeSelectList, new { @class = "form-control", @id = "selectedSession", required = "required" })
            </div>
        </div>

        @*<div class="form-group">
            @Html.LabelFor(model => model.Department.Id, "Department", htmlAttributes: new {@class = "control-label col-md-2"})
            <div class="col-md-10">
                @Html.DropDownList("Department_Id", null, htmlAttributes: new {@class = "form-control"})
                @Html.ValidationMessageFor(model => model.Department.Id, "", new {@class = "text-danger"})
            </div>
        </div>*@

        @*<div class="form-group">
            @Html.LabelFor(model => model.DepartmentOption.Id, "Course Option", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownList("Department_Option_Id", null, htmlAttributes: new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.DepartmentOption.Id, "", new { @class = "text-danger" })
            </div>
        </div>*@

        <div class="form-group">
            @Html.LabelFor(model => model.Level.Id, "Level", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
             
                @Html.DropDownListFor(m => m.Level.Id, (IEnumerable<SelectListItem>)ViewBag.LevelSelectList, new { @class = "form-control", required = "required" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Semester.Id, "Semester", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
              
                @Html.DropDownListFor(m => m.Semester.Id, (IEnumerable<SelectListItem>)ViewBag.SemesterSelectList, new { @class = "form-control", @id = "selectedSession", required = "required" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Minimum_Unit, "Minimum Unit", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Minimum_Unit, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Minimum_Unit, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Maximum_Unit, "Maximum Unit", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Maximum_Unit, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Maximum_Unit, "", new { @class = "text-danger" })
            </div>
        </div>

       

        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="Create" class="btn btn-default" />
            </div>
        </div>
    </div>
}

<div>
    @Html.ActionLink("Back to List", "Index")
</div>
