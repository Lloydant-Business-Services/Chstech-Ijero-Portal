@model Abundance_Nk.Web.Areas.Student.ViewModels.CourseRegistrationViewModel

@{
    // Layout = "~/Views/Shared/_NewThemeLayout.cshtml";
    Layout = "~/Areas/Student/Views/Shared/_NewThemeLayout.cshtml";
}

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")

    <script src="~/Scripts/jquery.min.js"></script>
    <script src="~/Scripts/jquery-ui.min.js"></script>
<link href="~/Content/jquery-ui.css" rel="Stylesheet" type="text/css" />

    <script type="text/javascript">

        var numberOfSelectedCourses = 0;
        var totalSelectedCourseUnit = 0;
        var totalCarryOverCourseUnit = 0;
        var student_id = null;
        var session_semester_id = null;
        var minUnit = null;
        var maxUnit = null;
        var courseRegistered = null;
        var carryOverExist = null;
        var selectedCourses = [];
        var coursesToRemove = [];
        var deptId = null;
        var progId = null;

        $(document).ready(function() {

            student_id = $("#@Html.IdFor(m => m.Student.Id)").val();
            session_semester_id = $("#@Html.IdFor(m => m.SessionSemester.Id)").val();
            minUnit = $("#@Html.IdFor(m => m.MinimumUnit)").val();
            maxUnit = $("#@Html.IdFor(m => m.MaximumUnit)").val();
            courseRegistered = $("#@Html.IdFor(m => m.CourseAlreadyRegistered)").val();
            carryOverExist = $("#@Html.IdFor(m => m.CarryOverExist)").val();
            deptId = $("#@Html.IdFor(m => m.StudentLevel.Department.Id)").val();
            progId = $("#@Html.IdFor(m => m.StudentLevel.Programme.Id)").val();
            optionId = $("#@Html.IdFor(m => m.StudentLevel.DepartmentOption.Id)").val();

            if (!optionId) {
                optionId = 0;
            }

            loadRegisteredCourses();

            $("#searchCourse").autocomplete({
                source: function(request, response) {
                    $.ajax({
                        url: '@Url.Action("SearchCourse", "CourseRegistration")',
                        data: "{ 'prefix': '" + request.term + "', 'deptId': '" + deptId + "', 'progId': '" + progId + "', 'optionId': '" + optionId + "'}",
                        dataType: "json",
                        type: "POST",
                        contentType: "application/json; charset=utf-8",
                        success: function(data) {
                            response($.map(data, function(item) {
                                return item;
                            }));
                        },
                        error: function(response) {
                            alert(response.responseText);
                        },
                        failure: function(response) {
                            alert(response.responseText);
                        }
                    });
                },
                select: function(e, i) {
                    //console.log(e, i.item);
                    addCourse(i.item.value);
                },
                minLength: 1
            });

        });

        function loadRegisteredCourses() {

            if (student_id && session_semester_id) {

                $.ajax({
                    type: 'POST',
                    url: '@Url.Action("LoadStudentRegisteredCourses", "CourseRegistration")', // we are calling json method
                    dataType: 'json',
                    data: { studentId: student_id, sessionSemesterId: session_semester_id },
                    success: function(result) {
                        if (!result.IsError) {

                            if (result.CourseModels && result.CourseModels.length > 0) {

                                numberOfSelectedCourses = result.CourseModels.length;
                                totalCarryOverCourseUnit = result.CarryOverTotalUnit;
                                totalSelectedCourseUnit = totalSelectedCourseUnit + totalCarryOverCourseUnit;

                                $.each(result.CourseModels, function(i, model) {

                                    selectedCourses.push(model);
                                    totalSelectedCourseUnit = totalSelectedCourseUnit + model.CourseUnit;

                                });

                                populateTable(selectedCourses);

                            }

                            setValues();

                        } else {
                            alert(result.Message);
                        }
                    },
                    error: function(ex) {
                        alert('Operation failed.' + ex);
                    }
                });
            }
        }

        function addCourse(course) {
            if (course) {
                $.ajax({
                    type: 'POST',
                    url: '@Url.Action("GetCourse", "CourseRegistration")', // we are calling json method
                    dataType: 'json',
                    data: { courseValue: course, deptId: deptId, progId: progId },
                    success: function(result) {
                        if (!result.IsError) {

                            if (result.CourseModels && result.CourseModels.length > 0) {

                                $.each(result.CourseModels, function(i, model) {
                                    var existingCourse = selectedCourses.find(function(item) {
                                        return item.CourseId === model.CourseId;
                                    });

                                    if (!existingCourse) {
                                        selectedCourses.push(model);
                                        totalSelectedCourseUnit = totalSelectedCourseUnit + model.CourseUnit;
                                        numberOfSelectedCourses = numberOfSelectedCourses + 1;
                                    }
                                });

                                populateTable(selectedCourses);

                                setValues();

                                $("#searchCourse").val("");
                            }

                        } else {
                            alert(result.Message);
                        }
                    },
                    error: function(ex) {
                        alert('Operation failed.' + ex);
                    }
                });
            }
        }

        function populateTable(myArray) {

            $("#tbl_courses").empty();

            $.each(myArray, function(i, model) {

                $("#tbl_courses").append('<tr><td><input type="checkbox" class="checkbox" checked="true" onclick="updateCourse(' + model.CourseId + ',' + model.CourseUnit + ')"/></td>' +
                    '<td>' + model.CourseCode + '</td>' + '<td>' + model.CourseTitle + '</td>' + '<td>' + model.CourseUnit + '</td>' + '<td>' + model.CourseType + '</td></tr>');

            });
        }

        function updateCourse(course_id, course_unit) {
            //console.log(event, course_id);
            var course = null;
            if (event.target.checked) {
                if ((totalSelectedCourseUnit + course_unit) > maxUnit) {
                    alert("Maximum allowed unit exceeded.");
                }

                totalSelectedCourseUnit = totalSelectedCourseUnit + course_unit;
                numberOfSelectedCourses = numberOfSelectedCourses + 1;

                course = selectedCourses.find(function(item) {
                    return item.CourseId === course_id;
                });

                if (!course) {
                    //var newCourse = { CourseId: course_id, CourseUnit: course_unit, CourseCode: course_code, CourseTitle: course_title, CourseType: course_type };
                    //selectedCourses.push(newCourse);

                }

                populateTable(selectedCourses);
                setValues();
            } else {
                if ((totalSelectedCourseUnit - course_unit) < minUnit) {
                    alert("Total unit is less than the set minimum unit.");
                }

                totalSelectedCourseUnit = totalSelectedCourseUnit - course_unit;
                numberOfSelectedCourses = numberOfSelectedCourses - 1;

                course = selectedCourses.find(function(item) {
                    return item.CourseId === course_id;
                });

                if (course) {
                    $.each(selectedCourses, function(i, item) {
                        if (item && item.CourseId === course_id) {
                            
                            var existingCourse = coursesToRemove.find(function (item2) {
                                return item2.CourseId === item.CourseId;
                            });
                            if (!existingCourse) {
                                item.IsRegistered = false;
                                coursesToRemove.push(item);
                            }
                            
                            selectedCourses.splice(i, 1);
                        }
                    });
                }

                populateTable(selectedCourses);
                setValues();
            }
        }

        function setValues() {

            numberOfSelectedCourses = numberOfSelectedCourses <= 0 ? 0 : numberOfSelectedCourses;
            totalSelectedCourseUnit = totalSelectedCourseUnit <= 0 ? 0 : totalSelectedCourseUnit;

            $("#numberOfSelectedCourses").text(numberOfSelectedCourses);
            $("#totalCourseUnit").text(totalSelectedCourseUnit);

            if (totalSelectedCourseUnit >= minUnit && totalSelectedCourseUnit <= maxUnit) {
                $('#btnRegisterCourse').show();
                $('#btnRegisterCourseDisabled').hide();
            } else {
                $('#btnRegisterCourse').hide();
                $('#btnRegisterCourseDisabled').show();
            }
            
            if (courseRegistered === "False") {
                courseRegistered = false;
            }
            if (courseRegistered === "True") {
                courseRegistered = true;
            }

            if (courseRegistered) {
                $('#divCourseFormPrintOut').show();
                $('#btnCourseFormDisabled').hide();
            } else {
                $('#divCourseFormPrintOut').hide();
                $('#btnCourseFormDisabled').show();
            }
        }

        function registerCourses() {
            if (selectedCourses && student_id && session_semester_id) {

                if (coursesToRemove && coursesToRemove.length > 0) {

                    $.each(coursesToRemove, function (i, model) {
                        var course = selectedCourses.find(function (item) {
                            return item.CourseId === model.CourseId;
                        });
                        if (!course) {
                            selectedCourses.push(model);
                        }
                    });
                }
                var courses = JSON.stringify(selectedCourses);

                $("#processing").show();

                $('#btnRegisterCourse').hide();
                $('#btnRegisterCourseDisabled').show();

                if (carryOverExist === "True") {
                    carryOverExist = true;
                }
                if (carryOverExist === "False") {
                    carryOverExist = false;
                }

                $.ajax({
                    type: 'POST',
                    url: '@Url.Action("RegisteredCourses", "CourseRegistration")', // we are calling json method
                    dataType: 'json',
                    data: { courses: courses, studentId: student_id, sessionSemesterId: session_semester_id, courseAlreadyRegistered: courseRegistered, carryOverExist: carryOverExist },
                    success: function(result) {
                        if (!result.IsError) {
                            courseRegistered = true;
                            $('#divCourseFormPrintOut').show();
                            $('#btnCourseFormDisabled').hide();

                            alert(result.Message);
                            window.location.reload(true);
                        } else {
                            alert(result.Message);
                            window.location.reload(true);
                        }

                        $("#processing").hide();
                        $('#btnRegisterCourse').show();
                        $('#btnRegisterCourseDisabled').hide();
                    },
                    error: function(ex) {
                        alert('Operation failed.' + ex);
                        $("#processing").hide();
                        $('#btnRegisterCourse').show();
                        $('#btnRegisterCourseDisabled').hide();
                    }
                });
            } else {
                alert("Parameter not set.");
                return;
            }
        }

    </script>
}

<div class="col-md-12 card p-5">

        @Html.AntiForgeryToken()
        @Html.ValidationSummary(true)

        @Html.HiddenFor(model => model.Student.Id)
        @Html.HiddenFor(model => model.CurrentSessionSemester.SessionSemester.Session.Id)
        @Html.HiddenFor(model => model.SessionSemester.Id)
        @Html.HiddenFor(model => model.StudentLevel.Level.Id)

        @Html.HiddenFor(model => model.TotalSecondSemesterCarryOverCourseUnit)
        @Html.HiddenFor(model => model.TotalFirstSemesterCarryOverCourseUnit)
        @Html.HiddenFor(model => model.FirstSemesterMinimumUnit)
        @Html.HiddenFor(model => model.FirstSemesterMaximumUnit)
        @Html.HiddenFor(model => model.SecondSemesterMinimumUnit)
        @Html.HiddenFor(model => model.SecondSemesterMaximumUnit)
        @Html.HiddenFor(model => model.MinimumUnit)
        @Html.HiddenFor(model => model.MaximumUnit)
        @Html.HiddenFor(model => model.CourseAlreadyRegistered)
        @Html.HiddenFor(model => model.CarryOverExist)

        @Html.HiddenFor(model => model.RegisteredCourse.Id)
        @Html.HiddenFor(model => model.RegisteredCourse.Approved)

        @if (Model.Student != null && Model.Student.ApplicationForm != null)
        {
            @Html.HiddenFor(model => model.Student.ApplicationForm.Id)
        }


        <div class="col-md-12 card card-primary p-5">

            <div class="form-group">
                <div class="col-md-12" style="font-size:15pt; text-transform:uppercase">
                    @Html.HiddenFor(model => model.Student.Id)
                    @Html.HiddenFor(model => model.StudentLevel.Level.Id)
                    @Html.DisplayFor(model => model.Student.FullName) <b>@Html.DisplayFor(model => model.StudentLevel.Level.Name)</b> DETAILS
                </div>
            </div>


            <div class="row">
                <div class="col-md-6">
                    <div class="form-group margin-bottom-0">
                        <div class="col-md-4">
                            <b>@Html.LabelFor(model => model.Student.MatricNumber, new { @class = "control-label " })</b>
                        </div>
                        <div class="col-md-8 ">
                            @Html.HiddenFor(model => model.Student.MatricNumber)
                            @Html.DisplayFor(model => model.Student.MatricNumber)
                        </div>
                    </div>
                </div>

                <div class="col-md-6">
                    <div class="form-group margin-bottom-0">
                        <div class="col-md-5">
                            <b>@Html.Label("Session", new { @class = "control-label " })</b>
                        </div>
                        <div class="col-md-7 ">
                            @Html.HiddenFor(model => model.CurrentSessionSemester.SessionSemester.Session.Id)
                            @Html.DisplayFor(model => model.CurrentSessionSemester.SessionSemester.Session.Name)
                        </div>
                    </div>
                </div>
            </div>

            <div class="row">
                <div class="col-md-6">
                    <div class="form-group margin-bottom-0">
                        <div class="col-md-4">
                            <b>@Html.LabelFor(model => model.StudentLevel.Programme.Name, new { @class = "control-label " })</b>
                        </div>
                        <div class="col-md-8 ">
                            @Html.HiddenFor(model => model.StudentLevel.Programme.Id)
                            @Html.DisplayFor(model => model.StudentLevel.Programme.Name)
                        </div>
                    </div>
                </div>

                <div class="col-md-6">
                    <div class="form-group margin-bottom-0">
                        <div class="col-md-5">
                            <b>@Html.LabelFor(model => model.StudentLevel.Department.Name, new { @class = "control-label " })</b>
                        </div>
                        <div class="col-md-7 ">
                            @Html.HiddenFor(model => model.StudentLevel.Department.Id)
                            @Html.DisplayFor(model => model.StudentLevel.Department.Name)
                        </div>
                    </div>
                </div>
            </div>

            <div class="row">
                <div class="col-md-6">
                    <div class="form-group margin-bottom-0">
                        <div class="col-md-4">
                            <b>@Html.LabelFor(model => model.StudentLevel.Department.Faculty.Name, new { @class = "control-label " })</b>
                        </div>
                        <div class="col-md-8 ">
                            @Html.DisplayFor(model => model.StudentLevel.Department.Faculty.Name)
                        </div>
                    </div>
                </div>

                <div class="col-md-6">
                    <div class="form-group margin-bottom-0">
                        @if (Model.StudentLevel.DepartmentOption != null)
                        {
                            <div class="col-md-5">
                                <b>@Html.LabelFor(model => model.StudentLevel.DepartmentOption.Name, new { @class = "control-label " })</b>
                            </div>
                            <div class="col-md-7 ">
                                @Html.HiddenFor(model => model.StudentLevel.DepartmentOption.Id)
                                @Html.DisplayFor(model => model.StudentLevel.DepartmentOption.Name)
                            </div>
                        }
                    </div>
                </div>
            </div>
        </div>

        @if (Model != null && Model.CarryOverCourses != null && Model.CarryOverCourses.Count > 0)
        {
            <div class="col-md-12 card p-5">
                <div class="panel-body">
                    <div>

                        <div class="row">
                            <div class="col-md-12">
                                <b>Carry Over Courses</b>
                                <div class="pull-right record-count-label">

                                    <label class="caption">1st Semester Total Unit</label>&nbsp;<span class="badge" style="background-color: gray; border-radius: 2px !important; color:white !important">@Model.TotalFirstSemesterCarryOverCourseUnit</span>
                                    <label class="caption">2nd Semester Total Unit</label>&nbsp;<span class="badge" style="background-color: gray; border-radius: 2px !important; color:white !important">@Model.TotalSecondSemesterCarryOverCourseUnit</span>

                                    <span class="caption">Total Course</span>&nbsp;<span class="badge" style="background-color: gray; border-radius: 2px !important; color:white !important">@Model.CarryOverCourses.Count</span>
                                </div>
                            </div>
                        </div>

                        <div class="row">
                            <div class="col-md-12">
                                <div class="table-responsive " style="font-size:9pt">
                                    <table class="table table-condensed grid-table table-head-alt mb30">
                                        <thead>
                                            <tr class="well" style="height:35px; vertical-align:middle">
                                                <th>
                                                    @Html.CheckBox("selectAllCarryOverCourses")
                                                </th>
                                                <th>
                                                    Course Code
                                                </th>
                                                <th>
                                                    Course Title
                                                </th>
                                                <th>
                                                    Course Unit
                                                </th>
                                                <th>
                                                    Course Type
                                                </th>
                                                <th>
                                                    Semester
                                                </th>
                                            </tr>
                                        </thead>

                                        @for (int i = 0; i < Model.CarryOverCourses.Count; i++)
                                        {
                                            <tr>
                                                <td>
                                                    @Html.HiddenFor(model => Model.CarryOverCourses[i].Course.IsRegistered)
                                                    @Html.CheckBoxFor(model => Model.CarryOverCourses[i].Course.IsRegistered, new { @class = "ckb3", id = Model.CarryOverCourses[i].Course.Id })
                                                </td>

                                                <td>
                                                    @Html.HiddenFor(model => Model.CarryOverCourses[i].Course.Code)
                                                    @Html.DisplayFor(model => Model.CarryOverCourses[i].Course.Code)
                                                </td>

                                                <td>
                                                    @Html.HiddenFor(model => Model.CarryOverCourses[i].Course.Id)
                                                    @Html.DisplayFor(model => Model.CarryOverCourses[i].Course.Name)
                                                </td>

                                                <td class="unit">
                                                    @Html.HiddenFor(model => Model.CarryOverCourses[i].Course.Unit)
                                                    @Html.DisplayFor(model => Model.CarryOverCourses[i].Course.Unit)
                                                </td>

                                                <td>
                                                    @Html.HiddenFor(model => Model.CarryOverCourses[i].Course.Type.Id)
                                                    @Html.DisplayFor(model => Model.CarryOverCourses[i].Course.Type.Name)
                                                </td>

                                                <td>
                                                    @Html.HiddenFor(model => Model.CarryOverCourses[i].Semester.Id)
                                                    @Html.DisplayFor(model => Model.CarryOverCourses[i].Semester.Name)
                                                </td>

                                                @Html.HiddenFor(model => Model.CarryOverCourses[i].Id)
                                                @Html.HiddenFor(model => Model.CarryOverCourses[i].Mode.Id)
                                                @Html.HiddenFor(model => Model.CarryOverCourses[i].CourseRegistration.Id)
                                            </tr>
                                        }

                                    </table>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        }

   


        <div class="col-md-12 card p-5">
            <div class="panel-body">
                <div id="semester_courses">

                    <div class="row">
                        
                            <div class="col-md-12">
                                <div class="col-md-6 pl-0">
                                    <h3>
                                        @if (Model.SessionSemester != null)
                                        {
                                            @Model.SessionSemester.Semester.Name
                                        }
                                        Courses
                                    </h3>
                                </div>
                            </div>
                        
                    </div>
                    <div class="row">
                        
                        <div class="col-md-10 offset-md-1 justify-content-center">
                            <div class="col-md-12">
                                <input type="text" class="form-control" id="searchCourse" placeholder="Search for courses..." />
                            </div>
                        </div>
                       
                    </div>
                    <br/>
                    <div class="row">
                        <div class="col-md-12">
                            <div class="pull-right record-count-label">
                                <span class="caption">Sum of Selected Course Unit</span>&nbsp;<span id="totalCourseUnit" class="badge" style="background-color: gray; border-radius: 2px !important; color: white !important">0</span>
                                <label class="caption">Min Unit</label>&nbsp;<span id="spSecondSemesterMinimumUnit" class="badge" style="background-color: gray; border-radius: 2px !important; color: white !important">@Model.MinimumUnit</span>
                                <label class="caption">Max Unit</label>&nbsp;<span id="spSecondSemesterMaximumUnit" class="badge" style="background-color: gray; border-radius: 2px !important; color: white !important">@Model.MaximumUnit</span>
                                <span class="caption">Total Course</span>&nbsp;<span id="numberOfSelectedCourses" class="badge" style="background-color: gray; border-radius: 2px !important; color: white !important">0</span>
                            </div>
                        </div>
                    </div>



                    <div class="row">
                        <div class="col-md-12">
                            <div class="table-responsive" style="font-size: 9pt">
                                <table class="table table-condensed grid-table table-head-alt mb5">
                                    <thead>
                                        <tr class="well" style="height: 35px; vertical-align: middle">
                                            <th>
                                                @*@Html.CheckBox("selectAllSecondSemester")*@
                                            </th>
                                            <th>
                                                Course Code
                                            </th>
                                            <th>
                                                Course Title
                                            </th>
                                            <th>
                                                Course Unit
                                            </th>
                                            <th>
                                                Course Type
                                            </th>
                                        </tr>
                                    </thead>
                                    <tbody id="tbl_courses"></tbody>

                                </table>

                            </div>
                        </div>
                    </div>
                </div>

                <br />
                <div class="col-md-12" id="buttons">
                    @*@if (Model.CurrentSessionSemester.SessionSemester.Session.Id == 8)
                        {*@
                    <div class="form-group">
                        <input type="button" id="btnRegisterCourse" onclick="registerCourses()" value="Register Course" class="btn btn-primary btn-lg"/> 
                        <button type="button" style="display: none" disabled="disabled" id="btnRegisterCourseDisabled" class="btn btn-primary btn-lg">Register Course</button> &nbsp;
                        <span id="divCourseFormPrintOut" class="form-group">
                            @Html.ActionLink("Print Course Form", "CourseFormPrintOut", "CourseRegistration",
                                new
                                {
                                    Area = "Student",
                                    sesid = Model.CurrentSessionSemester.SessionSemester.Session.Id,
                                    sid = @Model.Student.Id,
                                    smid = Model.CurrentSessionSemester.SessionSemester.Semester.Id
                                }, new {@class = "btn btn-primary btn-lg", target = "_blank", id = "alCourseRegistration"})
                    </span>
                        
                        <button type="button" style="display: none" disabled="disabled" id="btnCourseFormDisabled" class="btn btn-primary btn-lg">Print Course Form</button>
                        
                </div>
                <div>
                    <blockquote style="color: goldenrod">
                        Ensure that the sum of the selected course units is greater than or equal to the Min Unit OR less than or equal to the Max Unit.
                        <i>NB: You cannot register for course if this condition is not met.</i> Contact the school support if the Min Unit or Max Unit is 0.
                    </blockquote>
                </div>
                @*//}*@


                <div class="form-group">
                    <div id="processing" style="display: none">
                        <img src="@Url.Content("~/Content/Images/bx_loader.gif")" />
                        <span>Processing ...</span>
                    </div>
                </div>

            </div>
        </div>
    </div>
    

</div>
